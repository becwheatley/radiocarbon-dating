percent_sites = percent_sites,
nsim = nsim)
sample.uniform           <- get_samples(evidence = baseline.data[[1]][[1]],
sampling_method = "uniform",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.ancient <- get_samples(evidence = baseline.data[[1]][[1]],
sampling_method = "singleton_ancient",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.recent  <- get_samples(evidence = baseline.data[[1]][[1]],
sampling_method = "singleton_recent",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.random  <- get_samples(evidence = baseline.data[[1]][[1]],
sampling_method = "singleton_random",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.bracketed         <- get_samples(evidence = baseline.data[[1]][[1]],
sampling_method = "bracketed",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
normalised      = TRUE ## are calibration curves (and, later, SPDs) normalised?
ncores          = 6    ## the number of threads to use when calibrating the radiocarbon dates
cal.baseline.noloss <- calibrate_samples(samples = baseline.data[[1]],
normalised = normalised,
ncores = ncores)
cal.uniform           <- calibrate_samples(samples = sample.uniform,
normalised = normalised,
ncores = ncores)
cal.singleton.ancient <- calibrate_samples(samples = sample.singleton.ancient,
normalised = normalised,
ncores = ncores)
cal.singleton.recent  <- calibrate_samples(samples = sample.singleton.recent,
normalised = normalised,
ncores = ncores)
cal.singleton.random  <- calibrate_samples(samples = sample.singleton.random,
normalised = normalised,
ncores = ncores)
cal.bracketed         <- calibrate_samples(samples = sample.bracketed,
normalised = normalised,
ncores = ncores)
runm = 100 ## the running mean to use for the SPDs
spd.baseline          <- compare_spds(calibrated_samples = cal.baseline.noloss,
timeRange = timeRange,
runm = runm,
normalised = normalised)
spd.uniform           <- compare_spds(calibrated_samples = cal.uniform,
timeRange = timeRange,
runm = runm,
normalised = normalised)
spd.singleton.ancient <- compare_spds(calibrated_samples = cal.singleton.ancient,
timeRange = timeRange,
runm = runm,
normalised = normalised)
spd.singleton.recent  <- compare_spds(calibrated_samples = cal.singleton.recent,
timeRange = timeRange,
runm = runm,
normalised = normalised)
spd.singleton.random  <- compare_spds(calibrated_samples = cal.singleton.random,
timeRange = timeRange,
runm = runm,
normalised = normalised)
spd.bracketed         <- compare_spds(calibrated_samples = cal.bracketed,
timeRange = timeRange,
runm = runm,
normalised = normalised)
plot.data <- data.frame(matrix(NA, nrow = length(spd.baseline$calBP)*6, ncol = 5))
names(plot.data) <- c("sample", "calBP", "lowerCI", "median", "upperCI")
for (i in 1:length(spd.baseline$calBP)){
plot.data[i,1] <- "baseline (no loss)"
plot.data[i,2] <- spd.baseline$calBP[i]
plot.data[i,3] <- spd.baseline$envelope[[1]][i,1]
plot.data[i,4] <- spd.baseline$envelope[[1]][i,2]
plot.data[i,5] <- spd.baseline$envelope[[1]][i,3]
}
for (i in 1:length(spd.singleton.ancient$calBP)){
plot.data[(length(spd.baseline$calBP)+i),1] <- "singleton ancient"
plot.data[(length(spd.baseline$calBP)+i),2] <- spd.singleton.ancient$calBP[i]
plot.data[(length(spd.baseline$calBP)+i),3] <- spd.singleton.ancient$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)+i),4] <- spd.singleton.ancient$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)+i),5] <- spd.singleton.ancient$envelope[[1]][i,3]
}
for (i in 1:length(spd.singleton.recent$calBP)){
plot.data[(length(spd.baseline$calBP)*2+i),1] <- "singleton recent"
plot.data[(length(spd.baseline$calBP)*2+i),2] <- spd.singleton.recent$calBP[i]
plot.data[(length(spd.baseline$calBP)*2+i),3] <- spd.singleton.recent$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*2+i),4] <- spd.singleton.recent$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*2+i),5] <- spd.singleton.recent$envelope[[1]][i,3]
}
for (i in 1:length(spd.singleton.random$calBP)){
plot.data[(length(spd.baseline$calBP)*3+i),1] <- "singleton random"
plot.data[(length(spd.baseline$calBP)*3+i),2] <- spd.singleton.random$calBP[i]
plot.data[(length(spd.baseline$calBP)*3+i),3] <- spd.singleton.random$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*3+i),4] <- spd.singleton.random$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*3+i),5] <- spd.singleton.random$envelope[[1]][i,3]
}
for (i in 1:length(spd.bracketed$calBP)){
plot.data[(length(spd.baseline$calBP)*4+i),1] <- "bracketed"
plot.data[(length(spd.baseline$calBP)*4+i),2] <- spd.bracketed$calBP[i]
plot.data[(length(spd.baseline$calBP)*4+i),3] <- spd.bracketed$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*4+i),4] <- spd.bracketed$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*4+i),5] <- spd.bracketed$envelope[[1]][i,3]
}
for (i in 1:length(spd.uniform$calBP)){
plot.data[(length(spd.baseline$calBP)*5+i),1] <- "uniform"
plot.data[(length(spd.baseline$calBP)*5+i),2] <- spd.uniform$calBP[i]
plot.data[(length(spd.baseline$calBP)*5+i),3] <- spd.uniform$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*5+i),4] <- spd.uniform$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*5+i),5] <- spd.uniform$envelope[[1]][i,3]
}
# Combined
group.colors <- c("baseline (no loss)" = "black", "singleton ancient" = "#FC8D62", "singleton recent" ="#8DA0CB",
"singleton random" = "#E78AC3", "bracketed" = "#A6D854", "uniform" = "#66C2A5")
ggplot(plot.data) +
geom_ribbon(aes(x = calBP, ymin = lowerCI, ymax = upperCI, fill = sample), alpha = 0.3) +
geom_line(aes(x = calBP, y = median, color = sample), lwd = 1) +
labs(x = "Years cal BP", y = "Probability") +
ggtitle("SPD, no population change") +
scale_x_reverse(breaks = seq(12200, 200, by = -6000), limits = c(12200, 200)) +
scale_fill_manual(values=group.colors) +
scale_color_manual(values=group.colors) +
theme_bw()
group.colors <- c("baseline (no loss)" = "black", "singleton ancient" = "#FC8D62", "singleton recent" ="#8DA0CB",
"singleton random" = "#E78AC3", "bracketed" = "#A6D854", "uniform" = "#66C2A5")
ggplot(plot.data) +
geom_ribbon(aes(x = calBP, ymin = lowerCI, ymax = upperCI, fill = sample), alpha = 0.3) +
geom_line(aes(x = calBP, y = median, color = sample), lwd = 1) +
labs(x = "Years cal BP", y = "Probability") +
ggtitle("SPD, no population change") +
scale_x_reverse(breaks = seq(12200, 200, by = -6000), limits = c(12200, 200)) +
scale_fill_manual(values=group.colors) +
scale_color_manual(values=group.colors) +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
library(rcarbon)
library(ggformula)
library(extraDistr)
library(EnvStats)
library(truncdist)
library(data.table)
library(tidyverse)
source("C:/Users/Bec/Work/Projects/Radiocarbon dating/GitHub/Analysis/simulation_study-source.R")
timeRange  = c(12000, 200)   ## for Holocene sites
no_sites   = 100             ## the number of sites we want in our simulated data set
no_samples = 5               ## the number of samples we want each site to have
pop_trend  = "no change"     ## the underlying population trend we want to mimic
nsim       = 100              ## the number of times we want to replicate each sample
baseline.data <- get_available_evidence(timeRange = timeRange, no_sites = no_sites, no_samples = no_samples,
pop_trend = pop_trend, nsim = nsim)
#median.baseline.data <- get_median_evidence(data = baseline.data)
percent_sites   = 50   ## the number of sites we want to apply the sampling method across (the remainder will be
## exhaustively sampled)
sampling_effort = 3    ## the number of samples we want to take using the uniform sampling method
sample.uniform           <- get_samples(evidence = baseline.data[[1]][[1]],
sampling_method = "uniform",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.ancient <- get_samples(evidence = baseline.data[[1]][[1]],
sampling_method = "singleton_ancient",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.recent  <- get_samples(evidence = baseline.data[[1]][[1]],
sampling_method = "singleton_recent",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.random  <- get_samples(evidence = baseline.data[[1]][[1]],
sampling_method = "singleton_random",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.bracketed         <- get_samples(evidence = baseline.data[[1]][[1]],
sampling_method = "bracketed",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
normalised      = TRUE ## are calibration curves (and, later, SPDs) normalised?
ncores          = 6    ## the number of threads to use when calibrating the radiocarbon dates
cal.baseline.noloss <- calibrate_samples(samples = baseline.data[[1]],
normalised = normalised,
ncores = ncores)
cal.uniform           <- calibrate_samples(samples = sample.uniform,
normalised = normalised,
ncores = ncores)
cal.singleton.ancient <- calibrate_samples(samples = sample.singleton.ancient,
normalised = normalised,
ncores = ncores)
cal.singleton.recent  <- calibrate_samples(samples = sample.singleton.recent,
normalised = normalised,
ncores = ncores)
cal.singleton.random  <- calibrate_samples(samples = sample.singleton.random,
normalised = normalised,
ncores = ncores)
cal.bracketed         <- calibrate_samples(samples = sample.bracketed,
normalised = normalised,
ncores = ncores)
runm = 100 ## the running mean to use for the SPDs
spd.baseline          <- compare_spds(calibrated_samples = cal.baseline.noloss,
timeRange = timeRange,
runm = runm,
normalised = normalised)
spd.uniform           <- compare_spds(calibrated_samples = cal.uniform,
timeRange = timeRange,
runm = runm,
normalised = normalised)
spd.singleton.ancient <- compare_spds(calibrated_samples = cal.singleton.ancient,
timeRange = timeRange,
runm = runm,
normalised = normalised)
spd.singleton.recent  <- compare_spds(calibrated_samples = cal.singleton.recent,
timeRange = timeRange,
runm = runm,
normalised = normalised)
spd.singleton.random  <- compare_spds(calibrated_samples = cal.singleton.random,
timeRange = timeRange,
runm = runm,
normalised = normalised)
spd.bracketed         <- compare_spds(calibrated_samples = cal.bracketed,
timeRange = timeRange,
runm = runm,
normalised = normalised)
plot.data <- data.frame(matrix(NA, nrow = length(spd.baseline$calBP)*6, ncol = 5))
names(plot.data) <- c("sample", "calBP", "lowerCI", "median", "upperCI")
for (i in 1:length(spd.baseline$calBP)){
plot.data[i,1] <- "baseline (no loss)"
plot.data[i,2] <- spd.baseline$calBP[i]
plot.data[i,3] <- spd.baseline$envelope[[1]][i,1]
plot.data[i,4] <- spd.baseline$envelope[[1]][i,2]
plot.data[i,5] <- spd.baseline$envelope[[1]][i,3]
}
for (i in 1:length(spd.singleton.ancient$calBP)){
plot.data[(length(spd.baseline$calBP)+i),1] <- "singleton ancient"
plot.data[(length(spd.baseline$calBP)+i),2] <- spd.singleton.ancient$calBP[i]
plot.data[(length(spd.baseline$calBP)+i),3] <- spd.singleton.ancient$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)+i),4] <- spd.singleton.ancient$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)+i),5] <- spd.singleton.ancient$envelope[[1]][i,3]
}
for (i in 1:length(spd.singleton.recent$calBP)){
plot.data[(length(spd.baseline$calBP)*2+i),1] <- "singleton recent"
plot.data[(length(spd.baseline$calBP)*2+i),2] <- spd.singleton.recent$calBP[i]
plot.data[(length(spd.baseline$calBP)*2+i),3] <- spd.singleton.recent$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*2+i),4] <- spd.singleton.recent$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*2+i),5] <- spd.singleton.recent$envelope[[1]][i,3]
}
for (i in 1:length(spd.singleton.random$calBP)){
plot.data[(length(spd.baseline$calBP)*3+i),1] <- "singleton random"
plot.data[(length(spd.baseline$calBP)*3+i),2] <- spd.singleton.random$calBP[i]
plot.data[(length(spd.baseline$calBP)*3+i),3] <- spd.singleton.random$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*3+i),4] <- spd.singleton.random$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*3+i),5] <- spd.singleton.random$envelope[[1]][i,3]
}
for (i in 1:length(spd.bracketed$calBP)){
plot.data[(length(spd.baseline$calBP)*4+i),1] <- "bracketed"
plot.data[(length(spd.baseline$calBP)*4+i),2] <- spd.bracketed$calBP[i]
plot.data[(length(spd.baseline$calBP)*4+i),3] <- spd.bracketed$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*4+i),4] <- spd.bracketed$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*4+i),5] <- spd.bracketed$envelope[[1]][i,3]
}
for (i in 1:length(spd.uniform$calBP)){
plot.data[(length(spd.baseline$calBP)*5+i),1] <- "uniform"
plot.data[(length(spd.baseline$calBP)*5+i),2] <- spd.uniform$calBP[i]
plot.data[(length(spd.baseline$calBP)*5+i),3] <- spd.uniform$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*5+i),4] <- spd.uniform$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*5+i),5] <- spd.uniform$envelope[[1]][i,3]
}
# Combined
group.colors <- c("baseline (no loss)" = "black", "singleton ancient" = "#FC8D62", "singleton recent" ="#8DA0CB",
"singleton random" = "#E78AC3", "bracketed" = "#A6D854", "uniform" = "#66C2A5")
ggplot(plot.data) +
geom_ribbon(aes(x = calBP, ymin = lowerCI, ymax = upperCI, fill = sample), alpha = 0.3) +
geom_line(aes(x = calBP, y = median, color = sample), lwd = 1) +
labs(x = "Years cal BP", y = "Probability") +
ggtitle("Summed probability distribution (no population change)") +
scale_x_reverse(breaks = seq(12200, 200, by = -6000), limits = c(12200, 200)) +
scale_fill_manual(values=group.colors) +
scale_color_manual(values=group.colors) +
theme_bw()
ggplot(plot.data) +
geom_ribbon(aes(x = calBP, ymin = lowerCI, ymax = upperCI, fill = sample), alpha = 0.3) +
geom_line(aes(x = calBP, y = median, color = sample), lwd = 1) +
labs(x = "Years cal BP", y = "Probability") +
ggtitle("Summed probability distribution (no population change)") +
scale_x_reverse(breaks = seq(12200, 200, by = -6000), limits = c(12200, 200)) +
scale_fill_manual(values=group.colors) +
scale_color_manual(values=group.colors) +
theme_bw()
cal.baseline.noloss1 <- rcarbon::calibrate(x = baseline.data[[1]][[1]]$age,
errors = baseline.data[[1]][[1]]$error,
calCurves = 'shcal20',
normalised = normal)
cal.baseline.noloss1 <- rcarbon::calibrate(x = baseline.data[[1]][[1]]$age,
errors = baseline.data[[1]][[1]]$error,
calCurves = 'shcal20',
normalised = normalised)
spd.baseline.noloss1 <- spd(x = cal.baseline.noloss1, timeRange = timeRange, runm = runm, spdnormalised = normalised)
plot.data <- data.frame(matrix(NA, nrow = length(spd.baseline$calBP)*7, ncol = 5))
names(plot.data) <- c("sample", "calBP", "lowerCI", "median", "upperCI")
for (i in 1:length(spd.baseline$calBP)){
plot.data[i,1] <- "baseline (no loss)"
plot.data[i,2] <- spd.baseline$calBP[i]
plot.data[i,3] <- spd.baseline$envelope[[1]][i,1]
plot.data[i,4] <- spd.baseline$envelope[[1]][i,2]
plot.data[i,5] <- spd.baseline$envelope[[1]][i,3]
}
for (i in 1:length(spd.baseline$calBP)){
plot.data[i,1] <- "baseline (no loss)"
plot.data[i,2] <- spd.baseline$calBP[i]
plot.data[i,3] <- spd.baseline$envelope[[1]][i,1]
plot.data[i,4] <- spd.baseline$envelope[[1]][i,2]
plot.data[i,5] <- spd.baseline$envelope[[1]][i,3]
}
for (i in 1:length(spd.singleton.ancient$calBP)){
plot.data[(length(spd.baseline$calBP)+i),1] <- "singleton ancient"
plot.data[(length(spd.baseline$calBP)+i),2] <- spd.singleton.ancient$calBP[i]
plot.data[(length(spd.baseline$calBP)+i),3] <- spd.singleton.ancient$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)+i),4] <- spd.singleton.ancient$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)+i),5] <- spd.singleton.ancient$envelope[[1]][i,3]
}
for (i in 1:length(spd.singleton.recent$calBP)){
plot.data[(length(spd.baseline$calBP)*2+i),1] <- "singleton recent"
plot.data[(length(spd.baseline$calBP)*2+i),2] <- spd.singleton.recent$calBP[i]
plot.data[(length(spd.baseline$calBP)*2+i),3] <- spd.singleton.recent$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*2+i),4] <- spd.singleton.recent$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*2+i),5] <- spd.singleton.recent$envelope[[1]][i,3]
}
for (i in 1:length(spd.singleton.random$calBP)){
plot.data[(length(spd.baseline$calBP)*3+i),1] <- "singleton random"
plot.data[(length(spd.baseline$calBP)*3+i),2] <- spd.singleton.random$calBP[i]
plot.data[(length(spd.baseline$calBP)*3+i),3] <- spd.singleton.random$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*3+i),4] <- spd.singleton.random$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*3+i),5] <- spd.singleton.random$envelope[[1]][i,3]
}
for (i in 1:length(spd.bracketed$calBP)){
plot.data[(length(spd.baseline$calBP)*4+i),1] <- "bracketed"
plot.data[(length(spd.baseline$calBP)*4+i),2] <- spd.bracketed$calBP[i]
plot.data[(length(spd.baseline$calBP)*4+i),3] <- spd.bracketed$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*4+i),4] <- spd.bracketed$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*4+i),5] <- spd.bracketed$envelope[[1]][i,3]
}
for (i in 1:length(spd.uniform$calBP)){
plot.data[(length(spd.baseline$calBP)*5+i),1] <- "uniform"
plot.data[(length(spd.baseline$calBP)*5+i),2] <- spd.uniform$calBP[i]
plot.data[(length(spd.baseline$calBP)*5+i),3] <- spd.uniform$envelope[[1]][i,1]
plot.data[(length(spd.baseline$calBP)*5+i),4] <- spd.uniform$envelope[[1]][i,2]
plot.data[(length(spd.baseline$calBP)*5+i),5] <- spd.uniform$envelope[[1]][i,3]
}
i
for (i in 1:length(spd.uniform$calBP)){
plot.data[(length(spd.baseline$calBP)*6+i),1] <- "baseline (noloss) 1"
plot.data[(length(spd.baseline$calBP)*6+i),2] <- spd.baseline.noloss1$grid$calBP[i]
plot.data[(length(spd.baseline$calBP)*6+i),3] <- NA
plot.data[(length(spd.baseline$calBP)*6+i),4] <- spd.baseline.noloss1$grid$PrDens[i]
plot.data[(length(spd.baseline$calBP)*6+i),5] <- NA
}
# Combined
group.colors <- c("baseline (no loss)" = "black", "singleton ancient" = "#FC8D62", "singleton recent" ="#8DA0CB",
"singleton random" = "#E78AC3", "bracketed" = "#A6D854", "uniform" = "#66C2A5", "baseline (no loss) 1" = "grey")
ggplot(plot.data) +
geom_ribbon(aes(x = calBP, ymin = lowerCI, ymax = upperCI, fill = sample), alpha = 0.3) +
geom_line(aes(x = calBP, y = median, color = sample), lwd = 1) +
labs(x = "Years cal BP", y = "Probability") +
ggtitle("Summed probability distribution (no population change)") +
scale_x_reverse(breaks = seq(12200, 200, by = -6000), limits = c(12200, 200)) +
scale_fill_manual(values=group.colors) +
scale_color_manual(values=group.colors) +
theme_bw()
ggplot(plot.data) +
#geom_ribbon(aes(x = calBP, ymin = lowerCI, ymax = upperCI, fill = sample), alpha = 0.3) +
geom_line(aes(x = calBP, y = median, color = sample), lwd = 1) +
labs(x = "Years cal BP", y = "Probability") +
ggtitle("Summed probability distribution (no population change)") +
scale_x_reverse(breaks = seq(12200, 200, by = -6000), limits = c(12200, 200)) +
scale_fill_manual(values=group.colors) +
scale_color_manual(values=group.colors) +
theme_bw()
ggplot(plot.data) +
#geom_ribbon(aes(x = calBP, ymin = lowerCI, ymax = upperCI, fill = sample), alpha = 0.3) +
geom_line(aes(x = calBP, y = median, color = sample), lwd = 1) +
labs(x = "Years cal BP", y = "Probability") +
ggtitle("Summed probability distribution (no population change)") +
scale_x_reverse(breaks = seq(12200, 200, by = -6000), limits = c(12200, 200)) +
scale_fill_manual(values=group.colors) +
scale_color_manual(values=group.colors) +
theme_bw()
library(rcarbon)
library(ggformula)
library(extraDistr)
library(EnvStats)
library(truncdist)
library(data.table)
library(tidyverse)
source("C:/Users/Bec/Work/Projects/Radiocarbon dating/GitHub/Analysis/simulation_study-source.R")
timeRange  = c(12000, 200)   ## for Holocene sites
no_sites   = 100             ## the number of sites we want in our simulated data set
no_samples = 5               ## the number of samples we want each site to have
pop_trend  = "no change"     ## the underlying population trend we want to mimic
nsim       = 100              ## the number of times we want to replicate each sample
baseline.data <- get_available_evidence(timeRange = timeRange, no_sites = no_sites, no_samples = no_samples,
pop_trend = pop_trend)
timeRange  = c(12000, 200)   ## for Holocene sites
no_sites   = 100             ## the number of sites we want in our simulated data set
no_samples = 5               ## the number of samples we want each site to have
pop_trend  = "no change"     ## the underlying population trend we want to mimic
nsim       = 20              ## the number of times we want to replicate each sample
percent_sites   = 50   ## the number of sites we want to apply the sampling method across (the remainder will be
## exhaustively sampled)
sampling_effort = 3    ## the number of samples we want to take using the uniform sampling method
sample.uniform           <- get_samples(evidence = baseline.data[[1]],
sampling_method = "uniform",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.ancient <- get_samples(evidence = baseline.data[[1]],
sampling_method = "singleton_ancient",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.recent  <- get_samples(evidence = baseline.data[[1]],
sampling_method = "singleton_recent",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.random  <- get_samples(evidence = baseline.data[[1]],
sampling_method = "singleton_random",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.bracketed         <- get_samples(evidence = baseline.data[[1]],
sampling_method = "bracketed",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
normalised      = TRUE ## are calibration curves (and, later, SPDs) normalised?
ncores          = 6    ## the number of threads to use when calibrating the radiocarbon dates
cal.baseline.noloss <- rcarbon::calibrate(x = baseline.data[[1]]$age,
errors = baseline.data[[1]]$error,
calCurves = 'shcal20',
normalised = normalised,
ncores = ncores)
cal.uniform           <- calibrate_samples(samples = sample.uniform,
normalised = normalised,
ncores = ncores)
library(rcarbon)
library(ggformula)
library(extraDistr)
library(EnvStats)
library(truncdist)
library(data.table)
library(tidyverse)
source("C:/Users/Bec/Work/Projects/Radiocarbon dating/GitHub/Analysis/simulation_study-source.R")
timeRange  = c(12000, 200)   ## for Holocene sites
no_sites   = 100             ## the number of sites we want in our simulated data set
no_samples = 5               ## the number of samples we want each site to have
pop_trend  = "no change"     ## the underlying population trend we want to mimic
nsim       = 20              ## the number of times we want to replicate each sample
baseline.data <- get_available_evidence(timeRange = timeRange, no_sites = no_sites, no_samples = no_samples,
pop_trend = pop_trend)
percent_sites   = 50   ## the number of sites we want to apply the sampling method across (the remainder will be
## exhaustively sampled)
sampling_effort = 3    ## the number of samples we want to take using the uniform sampling method
sample.uniform           <- get_samples(evidence = baseline.data[[1]],
sampling_method = "uniform",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.ancient <- get_samples(evidence = baseline.data[[1]],
sampling_method = "singleton_ancient",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.recent  <- get_samples(evidence = baseline.data[[1]],
sampling_method = "singleton_recent",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.singleton.random  <- get_samples(evidence = baseline.data[[1]],
sampling_method = "singleton_random",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
sample.bracketed         <- get_samples(evidence = baseline.data[[1]],
sampling_method = "bracketed",
sampling_effort = sampling_effort,
percent_sites = percent_sites,
nsim = nsim)
normalised      = TRUE ## are calibration curves (and, later, SPDs) normalised?
ncores          = 6    ## the number of threads to use when calibrating the radiocarbon dates
cal.baseline.noloss <- rcarbon::calibrate(x = baseline.data[[1]]$age,
errors = baseline.data[[1]]$error,
calCurves = 'shcal20',
normalised = normalised,
ncores = ncores)
cal.uniform           <- calibrate_samples(samples = sample.uniform,
normalised = normalised,
ncores = ncores)
cal.singleton.ancient <- calibrate_samples(samples = sample.singleton.ancient,
normalised = normalised,
ncores = ncores)
cal.singleton.recent  <- calibrate_samples(samples = sample.singleton.recent,
normalised = normalised,
ncores = ncores)
cal.singleton.random  <- calibrate_samples(samples = sample.singleton.random,
normalised = normalised,
ncores = ncores)
